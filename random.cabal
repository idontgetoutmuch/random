cabal-version:      >=1.10
name:               random
version:            1.2
license:            BSD3
license-file:       LICENSE
maintainer:         core-libraries-committee@haskell.org
bug-reports:        https://github.com/haskell/random/issues
synopsis:           Pseudo-random number generation
description:
    This package provides basic pseudo-random number generation, including the
    ability to split random number generators.
    .
    == "System.Random": pure pseudo-random number interface
    .
    In pure code, use 'System.Random.uniform' and 'System.Random.uniformR' from
    "System.Random" to generate pseudo-random numbers with a pure pseudo-random
    number generator like 'System.Random.StdGen'.
    .
    As an example, here is how you can simulate rolls of a six-sided die using
    'System.Random.uniformR':
    .
    >>> let roll = uniformR (1, 6)        :: RandomGen g => g -> (Word8, g)
    >>> let rolls = unfoldr (Just . roll) :: RandomGen g => g -> [Word8]
    >>> let pureGen = mkStdGen 42
    >>> take 10 (rolls pureGen)           :: [Word8]
    [1,1,3,2,4,5,3,4,6,2]
    .
    See "System.Random" for more details.
    .
    == "System.Random.Monad": monadic pseudo-random number interface
    .
    In monadic code, use 'System.Random.Monad.uniformM' and
    'System.Random.Monad.uniformRM' from "System.Random.Monad" to generate
    pseudo-random numbers with a monadic pseudo-random number generator, or
    using a monadic adapter.
    .
    As an example, here is how you can simulate rolls of a six-sided die using
    'System.Random.Monad.uniformRM':
    .
    >>> let rollM = uniformRM (1, 6)                 :: MonadRandom g s m => g s -> m Word8
    >>> let pureGen = mkStdGen 42
    >>> runGenState_ pureGen (replicateM 10 . rollM) :: m [Word8]
    [1,1,3,2,4,5,3,4,6,2]
    .
    The monadic adapter 'System.Random.Monad.runGenState_' is used here to lift
    the pure pseudo-random number generator @pureGen@ into the
    'System.Random.Monad.MonadRandom' context.
    .
    The monadic interface can also be used with existing monadic pseudo-random
    number generators. In this example, we use the one provided in the
    <https://hackage.haskell.org/package/mwc-random mwc-random> package:
    .
    >>> import System.Random.MWC as MWC
    >>> let rollM = uniformRM (1, 6)       :: MonadRandom g s m => g s -> m Word8
    >>> monadicGen <- MWC.create
    >>> (replicateM 10 . rollM) monadicGen :: m [Word8]
    [2,3,6,6,4,4,3,1,5,4]
    .
    See "System.Random.Monad" for more details.

category:           System
build-type:         Custom
extra-source-files:
    README.md
    CHANGELOG.md

source-repository head
    type:     git
    location: http://git.haskell.org/packages/random.git

custom-setup
    setup-depends:
        base >=4.10 && <5,
        Cabal >=1.10 && <3.3,
        cabal-doctest >=1.0.6 && <1.1

library
    exposed-modules:
        System.Random
        System.Random.Internal
        System.Random.Monad

    hs-source-dirs:   src
    default-language: Haskell2010
    ghc-options:
        -Weverything -Wno-implicit-prelude -Wno-missing-import-lists
        -Wno-missing-local-signatures -Wno-redundant-constraints
        -Wno-unsafe

    build-depends:
        base >=4.10 && <5,
        bytestring >=0.10 && <0.11,
        deepseq >=1.1 && <2,
        mtl >=2.2 && <2.3,
        splitmix >=0.0.3 && <0.1

test-suite legacy-test
    type:             exitcode-stdio-1.0
    main-is:          Legacy.hs
    hs-source-dirs:   test-legacy
    other-modules:
        T7936
        TestRandomIOs
        TestRandomRs
        Random1283
        RangeTest

    default-language: Haskell2010
    ghc-options:      -with-rtsopts=-M4M -Wno-deprecations
    build-depends:
        base >=4.10 && <5,
        containers >=0.5 && <0.7,
        random -any

test-suite doctests
    type:             exitcode-stdio-1.0
    main-is:          doctests.hs
    hs-source-dirs:   test
    default-language: Haskell2010
    build-depends:
        base >=4.10 && <5,
        doctest >=0.15 && <0.17,
        mwc-random >=0.13 && <0.15,
        primitive >=0.6 && <0.8,
        random -any,
        unliftio >=0.2 && <0.3

test-suite spec
    type:             exitcode-stdio-1.0
    main-is:          Spec.hs
    hs-source-dirs:   test
    other-modules:
        Spec.Range
        Spec.Run

    default-language: Haskell2010
    ghc-options:      -Wall
    build-depends:
        base >=4.10 && <5,
        bytestring >=0.10 && <0.11,
        random -any,
        smallcheck >=1.1 && <1.2,
        tasty >=1.0 && <1.3,
        tasty-smallcheck >=0.8 && <0.9,
        tasty-expected-failure >=0.11 && <0.12,
        tasty-hunit >=0.10 && <0.11

benchmark legacy-bench
    type:             exitcode-stdio-1.0
    main-is:          SimpleRNGBench.hs
    hs-source-dirs:   bench-legacy
    other-modules:    BinSearch
    default-language: Haskell2010
    ghc-options:
        -Wall -O2 -threaded -rtsopts -with-rtsopts=-N -Wno-deprecations

    build-depends:
        base >=4.10 && <5,
        random -any,
        rdtsc -any,
        split >=0.2 && <0.3,
        time >=1.8 && <1.11

benchmark bench
    type:             exitcode-stdio-1.0
    main-is:          Main.hs
    hs-source-dirs:   bench
    default-language: Haskell2010
    ghc-options:      -Wall -O2
    build-depends:
        base >=4.10 && <5,
        gauge >=0.2.3 && <0.3,
        random -any,
        splitmix >=0.0.3 && <0.1
